import React from "react";
import logo from "../../logo.svg";
import "./App.css";
import MainApp from "../MainApp";
import { useSelector } from "react-redux";

// Предложения по архитектуре приложения (некоторые дал в отдельных компонентах, здесь в общем)
// Так как приложение небольшое и простое, можно использовать простую модульную архитектуру
// Простые комопоненты, которые широко используются, такие как кнопки и т.д. можно вынести в каталог UI в папке components
// или вынести все периспользуемые компоненты, функции хуки, запросы, стили и т.д. в отдельную папку shared
// Обращения к АПИ вынести в отдельный модуль/папку api: users.api.ts, todos.api.ts и т.д.
// Файлам в модуле api можно дать расширение .api.ts чтобы было семантически понятно что они делают
// Работу со стором вынести в отдельную папку store, в которой в index.ts файле будет создаваться и инициализироваться
// стор, а в папке reducers будут храниться редюсеры, так как их может быть несколько.
// В данном проекте нет роутинга и отдельных страниц, но если бы были, то можно было бы сделать
// отдельную папку pages, где хранились бы отдельные страницы
// Каждый компонент будет представлять собой модуль, импорт из которого доступен только через index.ts файла,
// чтобы поддерживать изолированость модулей друг от друга и обеспечить импорт только тех элементов и функциональности, что прямо указано в index.ts
// Также часть функциональности, которая отвечает за какие то действия пользователя,
// например создание или редактирование записей можно вынести отдельно в папку features

// Структура проекта может выглядеть так:
// src:
//   components:
//    MyComponent:
//      index.ts - основной файл, входная точка в модуль, из которого импортируется модуль (необходимые части)
//      ui: - UI компоненты, которые используются только внутри данного модуля
//        index.tsx
//        MyComponentItem:
//          index.tsx
//      hooks: - кастомные хуки в которых содержится основная логика модуля
//        useMyComponent.ts
//      styles: - стили
//        MyComponent.module.css
//      libs: - вспомогательные функции для данного модуля/утилиты
//        myLib.ts
//      constants: - константы
//        index.ts
//      types: - типы
//         index.ts
//       .......
//  shared:
//    UI: - ширико и часто применяемые UI-компоненты
//      Buttons:
//          Button.tsx
//          styles:
//              Button.module.css
//    types:- ширико и часто применяемые общие типы
//      todo:
//        index.interface.ts
//    libs: - вспомогательные функции для всего приложения
//      ....
//    constants: - константы для всего приложения
//        index.ts
//    hooks: - общие хуки, используемые во многих частях приложения
//      useSomethingCommon.ts
//    api: - общие запросы к АПИ, используемые во многих частях приложения
//      commonApi:
//        index.api.ts
//    styles: - общие стили
//      commonStyles:
//        commonStyles.module.css
//    assets:
//        .........
//  store:
//    index.ts
//    reducers:
//      reducer1:
//          index.ts
//          ........
//     types:
//          .......
//     ..........
// features: - фичи, предполагающие действия пользователя, например нажатие на чекбокс и т.д.
//  feature1:
//    hooks:
//      ........
//    ui:
//      ........
//    lib: ..........
//    constants: ...........
//  ................

// В более крупном и сложном проекте можно использвоать более продвинутую, удобную и масштабируемую
// архитектуру, такую как FSD - feature slice design. Она позволяет создать отдельные независимые
// легко масштабируемые модули, компоненты архитектуры легко заменяемые, благодаря независимости модулей
// каждый модуль можно независимо модифицировать без сайд-эффектов.
// Пример архитектуры TODO приложения на FSD в моем GitHub - https://github.com/robertd2000/todo-test-task

// Все приложение следует перенести на современные функциональные React компоненты и React Hooks
// Также можно мигрировать с CRA (create react app) на Vite, что повысит произодительность и скорость сборки приложения
// Тесты тоже можно переделать на Vitest, так как он быстрее чем jest

function App(): JSX.Element {
  // список todos используется только в MainApp, кроме того, он хранится в store
  // и с помощью селектора можно получить доступ из компонентов
  // нет смысла получать todos здесь и передавать как пропсы в MainApp
  // лучше вынести  const todos = useSelector в MainApp
  const todos = useSelector(
    (state: { list: { todos: any[] } }) => state.list.todos
  );
  return (
    // todo list for users:
    <div className="App main">
      {/* Хэдэр лучше вынести в отдельный компонент */}
      <header className="App-header">
        TODO list with users:
        {/*<img src={logo} className="App-logo" alt="logo" />*/}
      </header>
      {/* MAIN APP: */}
      <MainApp todos={todos} />
      {/* Футер тоже лучше вынести в отдельный компонент */}
      <footer className="App-footer">
        <a
          href="https://example.org"
          target="_blank"
          className={"App-footer-link"}
        >
          All right reserved
        </a>
      </footer>
    </div>
  );
}

export default App;
